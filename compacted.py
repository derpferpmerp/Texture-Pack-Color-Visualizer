from Color import GColor
mcmetalist=list([x for x in __import__("os").listdir("./MCMETA/") if __import__("os").path.isfile(__import__("os").path.join("./MCMETA/", x)) and x.split(".")[-1]=="mcmeta"])
lstdesc=list([[__import__("json").loads(line) for line in open(f"./MCMETA/{g}.mcmeta", 'r').read().split('\n')][0]["pack"]["description"] for g in list([__import__("os").path.splitext(__import__("os").path.basename(f"./MCMETA/{n}"))[0] for n in mcmetalist])])
finallst=list([{__import__("os").path.splitext(__import__("os").path.basename(f"./MCMETA/{mcmetalist[lstdesc.index(k)]}"))[0]:k.replace(u"\u00A7","?")} for k in lstdesc])
print(u"Denote color codes with ? instead of \u00A7")
print("\n")
def prrgb(rgb,s):return(GColor.RGB(rgb[0],rgb[1],rgb[2])+s+GColor.END)
def rcolored(txt):
	infolst={}
	finalstring=""
	for x in range(len(list([str(txt[c]) for c in [i for i in range(len(txt))]]))-1):
		if list([str(txt[c]) for c in [i for i in range(len(txt))]])[x]=="?" and list([str(txt[c]) for c in [i for i in range(len(txt))]])[x+1] in list([list([cc for cc in {"red":["c","[255,85,85]"],"aqua":["b","[85,255,255]"],"blue":["9","[85,85,255]"],"gold":["6","[255,170,0]"],"gray":["7","[170,170,170]"],"black":["0","[0,0,0]"],"green":["a","[85,255,85]"],"white":["f","[255,255,255]"],"yellow":["e","[255,255,85]"],"dark_red":["4","[170,0,0]"],"dark_aqua":["3","[0,170,170]"],"dark_blue":["1","[0,0,170]"],"dark_gray":["8","[85,85,85]"],"dark_green":["2","[0,170,0]"],"dark_purple":["5","[170,0,170]"],"light_purple":["d","[255,85,255]"]}.values()])[v][0] for v in range(len(list([cc for cc in {"red":["c","[255,85,85]"],"aqua":["b","[85,255,255]"],"blue":["9","[85,85,255]"],"gold":["6","[255,170,0]"],"gray":["7","[170,170,170]"],"black":["0","[0,0,0]"],"green":["a","[85,255,85]"],"white":["f","[255,255,255]"],"yellow":["e","[255,255,85]"],"dark_red":["4","[170,0,0]"],"dark_aqua":["3","[0,170,170]"],"dark_blue":["1","[0,0,170]"],"dark_gray":["8","[85,85,85]"],"dark_green":["2","[0,170,0]"],"dark_purple":["5","[170,0,170]"],"light_purple":["d","[255,85,255]"]}.keys()])))]):infolst[f"{x+2}"]=list([list(map(str.strip, g.strip('][').replace('"','').split(','))) for g in list(([x[1] for x in list([cc for cc in {"red":["c","[255,85,85]"],"aqua":["b","[85,255,255]"],"blue":["9","[85,85,255]"],"gold":["6","[255,170,0]"],"gray":["7","[170,170,170]"],"black":["0","[0,0,0]"],"green":["a","[85,255,85]"],"white":["f","[255,255,255]"],"yellow":["e","[255,255,85]"],"dark_red":["4","[170,0,0]"],"dark_aqua":["3","[0,170,170]"],"dark_blue":["1","[0,0,170]"],"dark_gray":["8","[85,85,85]"],"dark_green":["2","[0,170,0]"],"dark_purple":["5","[170,0,170]"],"light_purple":["d","[255,85,255]"]}.values()])]))])[list([list([cc for cc in {"red":["c","[255,85,85]"],"aqua":["b","[85,255,255]"],"blue":["9","[85,85,255]"],"gold":["6","[255,170,0]"],"gray":["7","[170,170,170]"],"black":["0","[0,0,0]"],"green":["a","[85,255,85]"],"white":["f","[255,255,255]"],"yellow":["e","[255,255,85]"],"dark_red":["4","[170,0,0]"],"dark_aqua":["3","[0,170,170]"],"dark_blue":["1","[0,0,170]"],"dark_gray":["8","[85,85,85]"],"dark_green":["2","[0,170,0]"],"dark_purple":["5","[170,0,170]"],"light_purple":["d","[255,85,255]"]}.values()])[v][0] for v in range(len(list([cc for cc in {"red":["c","[255,85,85]"],"aqua":["b","[85,255,255]"],"blue":["9","[85,85,255]"],"gold":["6","[255,170,0]"],"gray":["7","[170,170,170]"],"black":["0","[0,0,0]"],"green":["a","[85,255,85]"],"white":["f","[255,255,255]"],"yellow":["e","[255,255,85]"],"dark_red":["4","[170,0,0]"],"dark_aqua":["3","[0,170,170]"],"dark_blue":["1","[0,0,170]"],"dark_gray":["8","[85,85,85]"],"dark_green":["2","[0,170,0]"],"dark_purple":["5","[170,0,170]"],"light_purple":["d","[255,85,255]"]}.keys()])))]).index(list([str(txt[c]) for c in [i for i in range(len(txt))]])[x+1])]
	for x in range(len(list([g for g in infolst.keys()]))):
		if x!=len(list([g for g in infolst.keys()]))-1:finalstring+=prrgb(list([g for g in infolst.values()])[x],str("".join(list([str(txt[c]) for c in [i for i in range(len(txt))]])[int(list([g for g in infolst.keys()])[int(x)]):int(list([g for g in infolst.keys()])[int(x)+1])-2])))
		else:finalstring+=prrgb(list([g for g in infolst.values()])[x],"".join(list([str(txt[c]) for c in [i for i in range(len(txt))]])[int(list([g for g in infolst.keys()])[int(x)]):len(txt)]))
	print(f"{finalstring}") if finalstring!=None else None
rcolored(str(input("Input: ")) if len(__import__("sys").argv)-1==0 else __import__("sys").argv[1])
lstodesc=list(["\n\t"+str(g).replace(u"\u00A7","?")+"\n" for g in lstdesc])
lstnames=list([f"?fUsing?f ?b{list([k for k in finallst[o].keys()])[0]}?b?f.?f?amcmeta?a?f:?f\n{lstodesc[o]}" for o in range(len(finallst))])
print("\n")
[f"{rcolored(lstnames[x])}" for x in range(len(lstnames)) if rcolored(lstnames[x])!=None]